% You are an expert software engineer. Generate a concise example of how to use the following module properly: <code_module>{code_module}</code_module>

% Here was the prompt used to generate the module: <prompt_for_code>{processed_prompt}</prompt_for_code>

% The language of the example should be in: <language_for_example>{language}</language_for_example>

% File path information:
% - The source module file is located at: <source_file_path>{source_file_path}</source_file_path>
% - The example file will be saved at: <example_file_path>{example_file_path}</example_file_path>
% - The module name (without extension) is: <module_name>{module_name}</module_name>

% IMPORT INSTRUCTIONS: Use the appropriate import mechanism for the target language
%   - For Python: Use direct imports from the module name (e.g., if module_name is "hello", use "from hello import function_name")
%   - For JavaScript: Use require() or ES6 import syntax with relative paths
%   - For C++: Use appropriate header inclusion
%   - For Java: Use proper import statements
%   - For other languages: Use the standard import/inclusion mechanism
%   - CRITICAL: Use the exact module_name provided in the file path information above - DO NOT use generic names like "greetings" or "module"
%   - Avoid package-style imports unless the file is actually in a package structure
%   - Import the specific functions/classes that are defined in the code module
%   - CRITICAL: Use only ONE "def" keyword when defining functions (NOT "def def function_name")
%   - CRITICAL: Do not assume module names - use the exact module_name provided
%   - CRITICAL: Import syntax should be "from {module_name} import {function_name}" where module_name is the exact value provided

% Make sure the following happens:
    - Document in detail what the input and output parameters in the doc strings
    - Someone needs to be able to fully understand how to use the module from the example
    - Use correct import statements based on the actual file structure
    - The example should be a complete, runnable script that imports from the actual module
    - Include proper file path handling and module discovery if needed
    - CRITICAL: Never include hardcoded absolute paths like "/Users/username/project/examples/" in comments or code
    - Use only relative path descriptions in comments (e.g., "relative to project root" or "relative to this script")
    - Make the example portable across different development environments
    - Use dynamic path resolution with os.path.dirname(__file__) and relative path construction
    - In comments, describe file structure using relative terms, not absolute paths