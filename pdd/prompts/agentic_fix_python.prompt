% You are an expert Python engineer. Your goal is to write the `agentic_fix` module.

% Role & Scope
A module that provides a robust, multi-agent, two-pass fallback mechanism for fixing code when automated attempts fail. It orchestrates local CLI-based agents (like Gemini, Claude, Codex) to analyze and repair code based on a detailed problem description.

% Requirements
1.  **Entry Point**: The main function `run_agentic_fix` will orchestrate the entire process.
2.  **Agent Discovery**:
    -   Dynamically discover available CLI agents by checking for API keys (e.g., `ANTHROPIC_API_KEY`) defined in the environment and configured in `.pdd/llm_model.csv`.
    -   If no agents are available, exit gracefully with an informative error message.
3.  **Input Preparation**:
    -   Accept paths to a prompt file, a code file, a unit test file, and an error log.
    -   **Pre-flight Check**: If the provided error log is empty, execute a default verification command for the target language to generate fresh error output, ensuring the agent always has context.
4.  **Two-Attempt Strategy**: For each available agent, perform the following two attempts in order:
    -   **Attempt 1: Harvest-Only (Strict & Fast)**:
        -   Use a concise prompt (`agentic_fix_harvest_only_LLM`) that instructs the agent to *only* output corrected file blocks.
        -   Invoke the agent with a short timeout.
        -   Parse the output strictly for file blocks (`<<<BEGIN_FILE...>>>`) and apply them.
        -   Verify the fix. If successful, terminate and report success.
    -   **Attempt 2: Primary (Permissive)**:
        -   If the first attempt fails, use a more detailed primary prompt (`agentic_fix_primary_LLM`) that allows for more comprehensive changes.
        -   Invoke the agent with a longer, full timeout.
        -   Parse the output for file blocks and an optional `<<<BEGIN_TESTCMD>>>` block.
        -   Apply file changes.
        -   Verify the fix using the standard command. If it fails, and the agent provided a custom test command, use that as a fallback verification.
        -   If successful, terminate and report success.
5.  **Output Parsing**: Implement robust regex-based parsing to extract content from `<<<BEGIN_FILE:path>>>...<<<END_FILE:path>>>` blocks and `<<<BEGIN_TESTCMD>>>...<<<END_TESTCMD>>>` blocks. Include a fallback to parse Python code fences for Gemini.
6.  **File Application**:
    -   Safely write changes to disk, normalizing paths to ensure they match existing project files (e.g., stripping `_fixed` suffixes).
    -   Do not write outside the project root directory.
7.  **Configuration**: Control behavior via environment variables (e.g., `PDD_AGENTIC_TIMEOUT`, `PDD_AGENTIC_VERIFY`).
8.  **Error Handling & Cleanup**: Handle `FileNotFoundError` for missing CLI tools and ensure temporary instruction files are always deleted.

% Dependencies
<pdd>This module relies on several internal prompts and helper modules. Per the prompting guide, we include the minimal, token-efficient examples of its direct dependencies to provide context and define their interfaces.</pdd>

<prompt_dependencies>
    <include>prompts/agentic_fix_primary_LLM.prompt</include>
    <include>prompts/agentic_fix_harvest_only_LLM.prompt</include>
</prompt_dependencies>

<module_dependencies>
    <agentic_langtest_example>
      <include>context/agentic_langtest_example.py</include>
    </agentic_langtest_example>
    <get_language_example>
      <include>context/get_language_example.py</include>
    </get_language_example>
    <llm_invoke_example>
      <include>context/llm_invoke_example.py</include>
    </llm_invoke_example>
    <load_prompt_template_example>
      <include>context/load_prompt_template_example.py</include>
    </load_prompt_template_example>
</module_dependencies>

<file_dependencies>
    <pdd>Reads .pdd/llm_model.csv to discover available agents and API keys.</pdd>
</file_dependencies>

% Instructions
- The module should be implemented in `pdd/agentic_fix.py`.
- Use the `rich` library for styled console output.
- Use helper functions for subprocess execution in a sanitized, non-interactive environment.
- Specialized "variant runner" functions (e.g., `_run_google_variants`) should handle the specifics of invoking each agent's CLI, including adding wrappers to enforce the output format.

% Deliverables
- Code: `pdd/agentic_fix.py` containing the `run_agentic_fix` function and its helpers.