% You are an expert Python engineer. Your goal is to write the pdd/agentic_fix.py module, matching the original implementation exactly to ensure compatibility with the existing test suite.

% Role & Scope
A module that provides a robust, multi-agent, two-pass fallback mechanism for fixing code. It orchestrates local CLI-based agents to repair code based on a detailed problem description.

% Requirements
- The file must start with from __future__ import annotations.
- All functions must be fully type-hinted.
- Use rich.console.Console for all printing.
- Preserve backward compatibility with earlier test suites and public aliases.

% Instructions

### Module Imports
- Import exactly these standard modules (names must match): os, re, shutil, subprocess, difflib, pathlib (Path), typing (Tuple, List, Optional, Dict), rich.console (Console).
- Perform these internal imports verbatim (names MUST match):
  - from .get_language import get_language
  - from .llm_invoke import _load_model_data
  - from .load_prompt_template import load_prompt_template
  - from .agentic_langtest import default_verify_cmd_for

### Module Constants and Globals
- Define console = Console().
- Define provider preference list exactly: AGENT_PROVIDER_PREFERENCE = ["anthropic", "google", "openai"].
- Implement logging level detection exactly:
  - _env_level = os.getenv("PDD_AGENTIC_LOGLEVEL")
  - If _env_level is None AND os.getenv("PYTEST_CURRENT_TEST") is set, set _env_level = "quiet". Otherwise leave as-is.
  - _LOGLEVEL = (_env_level or "normal").strip().lower()
  - _IS_QUIET = (_LOGLEVEL == "quiet"); _IS_VERBOSE = (_LOGLEVEL == "verbose").
- Define environment-tunable constants with these names and defaults:
  - _AGENT_COST_PER_CALL = float(os.getenv("PDD_AGENTIC_COST_PER_CALL", "0.02"))
  - _AGENT_CALL_TIMEOUT  = int(os.getenv("PDD_AGENTIC_TIMEOUT", "240"))
  - _VERIFY_TIMEOUT      = int(os.getenv("PDD_AGENTIC_VERIFY_TIMEOUT", "120"))
  - _MAX_LOG_LINES       = int(os.getenv("PDD_AGENTIC_MAX_LOG_LINES", "200"))
  - _AGENT_TESTCMD_ALLOWED = (os.getenv("PDD_AGENTIC_AGENT_TESTCMD", "1") != "0")
- Define suffix tuple for mapping *_fixed back to originals: _COMMON_FIXED_SUFFIXES = ("_fixed", ".fixed", "-fixed").

### Helper Functions (implement EXACT behavior & signatures; fully type-hinted)
- _print(msg: str, *, force: bool = False) -> None
  - Rich print; suppressed when quiet unless force=True.
- _info(msg: str) -> None
  - Calls _print.
- _always(msg: str) -> None
  - Calls _print; do not force (matches original behavior).
- _verbose(msg: str) -> None
  - Print only if _IS_VERBOSE.
- _begin_marker(path: Path) -> str  ==> returns "<<<BEGIN_FILE:{path}>>>".
- _end_marker(path: Path) -> str    ==> returns "<<<END_FILE:{path}>>>".
- get_agent_command(provider: str, instruction_file: Path) -> List[str]
  - Return base CLI for generic runner: "openai" -> ["codex", "exec", "--skip-git-repo-check"]; "anthropic"/"google" -> []; unknown -> [].
- find_llm_csv_path() -> Optional[Path]
  - Return first existing among (in this order): ~/.pdd/llm_model.csv, ~/.llm/llm_model.csv, ./.pdd/llm_model.csv; else None.
- _print_head(label: str, text: str, max_lines: int = _MAX_LOG_LINES) -> None
  - Verbose-only: print first max_lines and note truncation.
- _print_diff(old: str, new: str, path: Path) -> None
  - Verbose-only unified diff; if no change, print a short yellow notice.
- _normalize_code_text(body: str) -> str
  - Remove a single leading newline if present; ensure exactly one trailing newline.
- _extract_files_from_output(*blobs: str) -> Dict[str, str]
  - Parse multi-file blocks using DOTALL regex: <<<BEGIN_FILE:(.*?)>>>(.*?)<<<END_FILE:\1>>>. Return {emitted_path: content}.
- _extract_testcmd(*blobs: str) -> Optional[str]
  - Detect a single optional block between <<<BEGIN_TESTCMD>>> and <<<END_TESTCMD>>>. Return None if missing.
- _extract_corrected_from_output(stdout: str, stderr: str, code_path: Path) -> Optional[str]
  - Single-file fallback: return the last block for the primary code path, matching any of: absolute path, real path, relative path, or basename. Ignore blocks containing placeholder like "FULL CORRECTED FILE CONTENT HERE". If none, return None.
- _extract_python_code_block(*blobs: str) -> Optional[str]
  - Gemini fallback: return the last fenced code block from ``` or ```python, with a trailing newline ensured.
- _sanitized_env_common() -> dict
  - Deterministic, non-interactive env for subprocess: TERM=dumb, CI=1, disable colors, SHELL=/bin/sh, small terminal size columns/lines.
- _sanitized_env_for_openai() -> dict
  - Based on common; strip shell completion env vars; set DISABLE_AUTO_COMPLETE=1, OPENAI_CLI_NO_TTY=1, OPENAI_CLI_NO_COLOR=1.
- _run_cli(cmd: List[str], cwd: Path, timeout: int) -> subprocess.CompletedProcess
  - Generic runner; capture stdout/stderr; do not raise on non-zero.
- _run_cli_args_openai(args: List[str], cwd: Path, timeout: int) -> subprocess.CompletedProcess
  - Use _sanitized_env_for_openai().
- _run_openai_variants(prompt_text: str, cwd: Path, total_timeout: int, label: str) -> subprocess.CompletedProcess
  - Try in order: codex exec; codex exec --skip-git-repo-check; codex exec --skip-git-repo-check --sandbox read-only. Allocate per-attempt time slice; log timeouts in yellow; return first attempt that yields any output or success.
- _run_cli_args_anthropic(args: List[str], cwd: Path, timeout: int) -> subprocess.CompletedProcess
  - Use _sanitized_env_common().
- _run_anthropic_variants(prompt_text: str, cwd: Path, total_timeout: int, label: str) -> subprocess.CompletedProcess
  - Single ["claude","-p",<prompt>] attempt; semantics parallel openai/google runners.
- _run_cli_args_google(args: List[str], cwd: Path, timeout: int) -> subprocess.CompletedProcess
  - Use _sanitized_env_common().
- _run_google_variants(prompt_text: str, cwd: Path, total_timeout: int, label: str) -> subprocess.CompletedProcess
  - Single ["gemini","-p",<prompt>] attempt; allow fenced-code fallback later if markers are absent.
- _run_testcmd(cmd: str, cwd: Path) -> bool
  - Execute bash -lc "<cmd>"; preview stdout/stderr (verbose); return True iff exit code 0.
- _verify_and_log(unit_test_file: str, cwd: Path, *, verify_cmd: Optional[str], enabled: bool) -> bool
  - If disabled -> True. If verify_cmd provided, substitute {test} (abs path) and {cwd} (project root) then run via _run_testcmd. Else run pytest -q on unit_test_file. Preview outputs in verbose. Return True iff exit 0.
- _safe_is_subpath(child: Path, parent: Path) -> bool
  - Return True iff child.resolve() is under parent.resolve().
- _strip_common_suffixes(name: str) -> str
  - Remove one known suffix before extension; reattach extension.
- _find_existing_by_basename(project_root: Path, basename: str) -> Optional[Path]
  - Return the first rglob match resolved, else None.
- _normalize_target_path(emitted_path: str, project_root: Path, primary_code_path: Path, allow_new: bool) -> Optional[Path]
  - Resolve to safe path inside project root. Map emitted basename to the primary file (also when *_fixed variants match). If allow_new=False and path doesnâ€™t exist, skip. Reject anything outside project root.
- _apply_file_map(file_map: Dict[str, str], project_root: Path, primary_code_path: Path, allow_new: bool) -> List[Path]
  - Normalize and write all emitted files; create directories; show diffs in verbose. Return list of written paths.
- _post_apply_verify_or_testcmd(provider: str, unit_test_file: str, cwd: Path, *, verify_cmd: Optional[str], verify_enabled: bool, stdout: str, stderr: str) -> bool
  - Run standard verification first; if it fails (or disabled) and _AGENT_TESTCMD_ALLOWED, attempt embedded TESTCMD. Return True iff any path passes.
- _try_harvest_then_verify(provider: str, code_path: Path, unit_test_file: str, code_snapshot: str, prompt_content: str, test_content: str, error_content: str, cwd: Path, *, verify_cmd: Optional[str], verify_enabled: bool) -> bool
  - Load template "agentic_fix_harvest_only_LLM". Format with the exact keys in Prompt Formatting Logic. Write agentic_fix_harvest.txt. Run the provider-specific harvest variant with a shorter timeout. Prefer multi-file application; else single-file; for Google allow fenced-code fallback. After applying, call _post_apply_verify_or_testcmd. Delete temp file. Return pass/fail.

### Main Entry Point (must match EXACTLY)
Signature:
def run_agentic_fix(prompt_file: str, code_file: str, unit_test_file: str, error_log_file: str) -> Tuple[bool, str, float, str]:

Agent discovery logic (EXACT and ordered):
1) csv_path = find_llm_csv_path().
2) CRITICAL: Immediately check the result. If not found, return EXACTLY: (False, "Could not find llm_models.csv in ~/.pdd/ or ~/.llm/", est_cost, used_model).
3) model_df = _load_model_data(csv_path).    # pass csv_path
4) Initialize: available_agents: List[str] = [], present_keys: List[str] = [], seen = set().
5) For provider in AGENT_PROVIDER_PREFERENCE:
   - provider_df = model_df[model_df["provider"].str.lower() == provider]; continue if empty.
   - CRITICAL: api_key_name = provider_df["api_key"].iloc[0]    # use this exact column access pattern
   - Check key presence: os.getenv(api_key_name). For provider == "google", ALSO accept os.getenv("GEMINI_API_KEY") as an alias.
   - If a key is present:
       * Iterate provider_df["model_id"] in order and append each model_id (string) to available_agents (deduplicate via 'seen').
       * Append the present key name to present_keys (use "GEMINI_API_KEY" when the alias was used).
6) CRITICAL: After the loop, if available_agents is empty, return EXACTLY: (False, "No configured agent API keys found in environment.", est_cost, used_model).

Read inputs & preflight:
- Print yellow banner starting fallback.
- cwd = Path.cwd(); print cyan info.
- Read prompt_content, code_path (resolved), orig_code, test_content, error_content.
- If error_content.strip() == "":
  - lang = get_language(code_path.suffix)
  - pre_cmd = os.getenv("PDD_AGENTIC_VERIFY_CMD") or default_verify_cmd_for(lang, unit_test_file)
  - If pre_cmd: substitute {test}=abs path, {cwd}=cwd and run via bash -lc. Else run pytest -q.
  - error_content = stdout + "\n" + stderr; write back to error_log_file. Preview heads in verbose. On exception, log yellow and proceed.

Verification policy:
- env_verify = os.getenv("PDD_AGENTIC_VERIFY"); verify_force = (os.getenv("PDD_AGENTIC_VERIFY_FORCE") == "1").
- verify_cmd = os.getenv("PDD_AGENTIC_VERIFY_CMD") or default_verify_cmd_for(get_language(code_path.suffix), unit_test_file).
- Decide verify_enabled:
  - If verify_force: True.
  - Elif verify_cmd: True.
  - Elif env_verify is None: True.
  - Elif env_verify.lower() == "auto": False.
  - Else: env_verify != "0".

Primary instruction:
- Load "agentic_fix_primary_LLM". If missing, return (False, "Failed to load primary agent prompt template.", est_cost, used_model).
- Format with exact keys (see Prompt Formatting Logic) and write agentic_fix_instructions.txt. Preview head in verbose.

Two-pass loop (must use PRIVATE helper name):
- allow_new = True.
- Iterate providers IN THE ORDER discovered in available_agents (these are model_ids, but you will run by their provider mapping).
- Determine provider from model_df row for the current model_id; set used_model = f"{provider}:{model_id}".
- Decide CLI binary: anthropic->"claude", google->"gemini", openai->"codex". If binary not on PATH, log yellow and continue.

Pass 1 â€” Harvest-only (STRICT):
- est_cost += _AGENT_COST_PER_CALL.
- Call the private function directly (CRITICAL): if _try_harvest_then_verify(...): clean up instruction file and return (True, f"Agentic fix successful with {ProviderName}.", est_cost, used_model).

Pass 2 â€” Primary (PERMISSIVE):
- est_cost += _AGENT_COST_PER_CALL.
- Run the provider variant runner with the prepared primary instruction.
- Prefer multi-file application via _extract_files_from_output + _apply_file_map; else single-file via _extract_corrected_from_output; for Google allow fenced-code fallback.
- Show diff in verbose.
- Proceed to verification if (returncode == 0) OR (any file changed) OR (multi-file emitted).
- If verification passes via _post_apply_verify_or_testcmd, print success and return as above.

After all candidates:
- If nothing passes, clean up temp instruction file and return (False, "All agents failed to produce a passing fix (no local fallback).", est_cost, used_model).

Exceptions:
- FileNotFoundError: print bold red message and return (False, <message>, 0.0, "agentic-cli").
- Generic Exception: print bold red and return (False, str(e), 0.0, "agentic-cli").

### Prompt Formatting Logic (use these keys for BOTH templates)
- code_abs: absolute path to code_file.
- test_abs: absolute path to unit_test_file.
- begin: _begin_marker(code_path).
- end: _end_marker(code_path).
- prompt_content: contents of prompt_file.
- code_content: original contents of code_file at invocation.
- test_content: contents of unit_test_file.
- error_content: contents of error_log_file (possibly preflight-populated).
- verify_cmd: command string with placeholders {test} and {cwd}, or literal "No verification command provided." when absent.

### Provider Variant Nuances
- OpenAI: try codex exec â†’ codex exec --skip-git-repo-check â†’ codex exec --skip-git-repo-check --sandbox read-only; treat any non-empty output as potentially valid.
- Anthropic: single claude -p attempt.
- Google: single gemini -p attempt; if markers absent but a fenced Python block appears, treat it as the corrected file body.

### File Application Rules
- Apply multi-file blocks first; else single-file for the primary target. For Google fallback, apply the fenced code.
- Enforce project-root safety: never write outside cwd.
- Map emitted basenames that match the primary code file (including *_fixed suffix variants) to the primary path.
- After each application, show a verbose unified diff.

### Logging Conventions
- Cyan for progress, yellow for warnings/timeouts/skips, bold green for success.
- _print_head previews only in verbose mode, truncated to _MAX_LOG_LINES lines.


% Dependencies
<pdd>...</pdd>
<module_dependencies>
  <agentic_langtest_example>
    <include>context/agentic_langtest_example.py</include>
  </agentic_langtest_example>
  <get_language_example>
    <include>context/get_language_example.py</include>
  </get_language_example>
  <load_prompt_template_example>
    <include>context/load_prompt_template_example.py</include>
  </load_prompt_template_example>
</module_dependencies>
<file_dependencies>
  <pdd>Reads .pdd/llm_model.csv to discover available agents and API keys.</pdd>
</file_dependencies>


% Deliverables
- Code: pdd/agentic_fix.py implementing the exact behavior above.
- Test Compatibility Alias: the very last line of the file MUST be exactly:
try_harvest_then_verify = _try_harvest_then_verify

