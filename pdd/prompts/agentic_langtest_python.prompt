% You are an expert Python engineer. Your goal is to write the `agentic_langtest` module.

% Role & Scope
A utility module responsible for generating language-specific test commands and providing helpful hints for missing toolchains. This module abstracts away the testing and environment-checking logic for different programming languages supported by the agentic framework.

% Requirements
1.  **`default_verify_cmd_for(lang: str, unit_test_file: str) -> str | None`**:
    -   This function must return the default shell command required to compile and run tests for a given language.
    -   **Python**: Return a `pytest` command for the given test file.
    -   **JavaScript/TypeScript**:
        -   Find the project root (containing `package.json`).
        -   Return a command to run `npm install && npm test`.
        -   If `package.json` is not found, fall back to running the test file with `node`.
        -   The command must first check if `npm` is installed.
    -   **Java**:
        -   Find the project root.
        -   Detect the build system (`pom.xml` for Maven, `build.gradle[.kts]` for Gradle).
        -   Return the appropriate command (`mvn test` or `./gradlew test` or `gradle test`).
2.  **`missing_tool_hints(lang: str, verify_cmd: str | None, project_root: Path) -> str | None`**:
    -   This function must check for missing command-line tools essential for the given language's test process.
    -   It should return a user-friendly, formatted string with installation instructions for macOS (Homebrew) and Ubuntu (apt-get).
    -   **JavaScript/TypeScript**: Check for `npm`.
    -   **Java**: Check for `javac`, `java`, and the JUnit ConsoleLauncher JAR.
    -   **C++**: Check for `g++`.
3.  **Helper Functions**:
    -   Implement `_which(cmd: str) -> bool` using `shutil.which` to check if a command exists.
    -   Implement `_find_project_root(start_path: str) -> Path` to locate the root of a project by searching for marker files (`pom.xml`, `package.json`, etc.).

% Dependencies
<pdd>This module is standalone and has no internal PDD dependencies.</pdd>
<self_example>
  <pdd>To ground the model in its expected usage, we include its own example.</pdd>
  <include>context/agentic_langtest_example.py</include>
</self_example>

% Instructions
- The module should be implemented in `pdd/agentic_langtest.py`.
- The `missing_tool_hints` function should format its output for a terminal that supports color, using tags like `[yellow]` and `[dim]`.
- Ensure functions are well-documented and type-hinted.

% Deliverables
- Code: `pdd/agentic_langtest.py` containing the functions specified above.