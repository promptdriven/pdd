% You are an expert Python engineer. Your goal is to write the `pdd/agentic_langtest.py` module.

% Role & Scope
A utility module responsible for generating language-specific test commands and providing helpful hints for missing toolchains. This module must be standalone with no internal project imports. It abstracts away the testing and environment-checking logic for different programming languages.

% Requirements
- All functions must be fully type-hinted.
- Use `pathlib.Path` for path manipulations.
- The file must start with `from __future__ import annotations`.

% Instructions

1.  **Implement `_which(cmd: str) -> bool`**:
    -   **Purpose**: A private helper to check if a command exists in the system's PATH.
    -   **Implementation**: Use `shutil.which(cmd) is not None`.

2.  **Implement `_find_project_root(start_path: str) -> Path`**:
    -   **Purpose**: A private helper to find the project root by searching upwards for common marker files.
    -   **Logic**:
        -   Start from `Path(start_path).resolve()`.
        -   Loop upwards (`p = p.parent`) until the root is reached (`p == p.parent`).
        -   In each directory, check for the existence of any of these files: `"build.gradle"`, `"build.gradle.kts"`, `"pom.xml"`, `"package.json"`, `"jest.config.js"`.
        -   If a marker is found, return the current directory path `p`.
        -   If no marker is found, return the parent of the original resolved start path.

3.  **Implement `default_verify_cmd_for(lang: str, unit_test_file: str) -> str | None`**:
    -   **Purpose**: Return a conservative, runnable shell command to compile and run tests for a given language.
    -   **Logic**:
        -   Handle `lang` case-insensitively.
        -   **Python**: Return the command `f'{os.sys.executable} -m pytest "{unit_test_file}" -q'`.
        -   **JavaScript/TypeScript**:
            -   Find the project root using `_find_project_root(unit_test_file)`.
            -   Construct a multi-line bash command string starting with `set -e`.
            -   The command must `cd` into the project root.
            -   It must check if `npm` exists using `command -v npm`.
            -   If `package.json` exists, it must run `npm install && npm test`.
            -   Otherwise, it must fall back to running the test file directly with `node`, wrapping the `require` in a `try...catch` block.
        -   **Java**:
            -   Find the project root.
            -   If `pom.xml` exists, return a command to `cd` to the root and run `mvn test`.
            -   Else if `build.gradle` or `build.gradle.kts` exists:
                -   If `gradlew` exists, return a command to `cd` to the root and run `./gradlew test`.
                -   Otherwise, return a command to `cd` to the root and run `gradle test`.
            -   If no build system is found, return `None`.
        -   **C++**: Include a commented-out section as a placeholder for potential C++ support. Do not implement it.
        -   If the language is not supported, return `None`.
