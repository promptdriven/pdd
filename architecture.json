[
  {
    "reason": "Core API endpoints for order management operations",
    "description": "RESTful API endpoints for creating, retrieving, updating, and listing orders. Includes authentication middleware and error handling.",
    "dependencies": ["order_models_Python.prompt"],
    "priority": 1,
    "filename": "order_api_Python.prompt",
    "filepath": "src/api/orders.py",
    "tags": ["backend", "api", "fastapi"],
    "interface": {
      "type": "api",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/orders",
          "auth": "JWT required",
          "requestSchema": "OrderCreateRequest",
          "responseSchema": "OrderResponse"
        },
        {
          "method": "GET",
          "path": "/api/v1/orders/{order_id}",
          "auth": "JWT required",
          "responseSchema": "OrderResponse"
        },
        {
          "method": "GET",
          "path": "/api/v1/orders",
          "auth": "JWT required",
          "responseSchema": "OrderListResponse"
        },
        {
          "method": "PUT",
          "path": "/api/v1/orders/{order_id}/status",
          "auth": "JWT required",
          "requestSchema": "OrderStatusUpdateRequest",
          "responseSchema": "OrderResponse"
        }
      ]
    }
  },
  {
    "reason": "Database models and schemas for order entities",
    "description": "SQLAlchemy models for orders, order items, and related entities. Includes validation, relationships, and database constraints.",
    "dependencies": [],
    "priority": 2,
    "filename": "order_models_Python.prompt",
    "filepath": "src/models/order.py",
    "tags": ["backend", "database", "sqlalchemy"],
    "interface": {
      "type": "module",
      "functions": [
        {
          "name": "Order.__init__",
          "signature": "def __init__(self, user_id: int, items: List[OrderItem], status: OrderStatus)",
          "returns": "Order instance",
          "sideEffects": "Creates database record"
        },
        {
          "name": "Order.calculate_total",
          "signature": "def calculate_total(self) -> Decimal",
          "returns": "Decimal",
          "sideEffects": "None"
        },
        {
          "name": "Order.update_status",
          "signature": "def update_status(self, new_status: OrderStatus)",
          "returns": "None",
          "sideEffects": "Updates database record"
        }
      ]
    }
  },
  {
    "reason": "Main order listing page with filtering and pagination",
    "description": "Next.js page component for displaying orders with filters for status, date range, and customer. Includes pagination controls and real-time updates.",
    "dependencies": ["order_api_Python.prompt", "order_components_TypeScriptReact.prompt"],
    "priority": 3,
    "filename": "orders_page_TypeScriptReact.prompt",
    "filepath": "app/orders/page.tsx",
    "tags": ["frontend", "nextjs", "typescript"],
    "interface": {
      "type": "page",
      "route": "/orders",
      "params": [
        {
          "name": "status",
          "type": "string",
          "description": "Filter orders by status (pending, processing, shipped, delivered)"
        },
        {
          "name": "dateFrom",
          "type": "string",
          "description": "Start date for date range filter"
        },
        {
          "name": "dateTo",
          "type": "string",
          "description": "End date for date range filter"
        },
        {
          "name": "page",
          "type": "number",
          "description": "Page number for pagination"
        }
      ],
      "dataSources": [
        {
          "kind": "api",
          "source": "/api/v1/orders",
          "method": "GET",
          "description": "Fetch orders with filters and pagination",
          "auth": "JWT token",
          "inputs": ["status", "dateFrom", "dateTo", "page", "limit"],
          "outputs": ["orders", "totalCount", "hasNextPage"],
          "refreshInterval": "30s"
        }
      ]
    }
  },
  {
    "reason": "Reusable order-related UI components",
    "description": "TypeScript React components for order display, status badges, and interactive elements. Includes proper TypeScript types and accessibility features.",
    "dependencies": [],
    "priority": 4,
    "filename": "order_components_TypeScriptReact.prompt",
    "filepath": "src/components/orders/OrderList.tsx",
    "tags": ["frontend", "react", "typescript", "ui"],
    "interface": {
      "type": "component",
      "props": [
        {
          "name": "orders",
          "type": "Order[]",
          "required": true
        },
        {
          "name": "onStatusChange",
          "type": "(orderId: string, newStatus: OrderStatus) => void",
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false
        }
      ],
      "emits": [
        {
          "name": "orderSelected",
          "payload": "Order"
        },
        {
          "name": "statusChanged",
          "payload": "{ orderId: string, newStatus: OrderStatus }"
        }
      ]
    }
  },
  {
    "reason": "Order creation form and workflow",
    "description": "Next.js page for creating new orders with item selection, quantity input, and validation. Includes real-time total calculation and submission handling.",
    "dependencies": ["order_api_Python.prompt", "order_components_TypeScriptReact.prompt"],
    "priority": 5,
    "filename": "create_order_page_TypeScriptReact.prompt",
    "filepath": "app/orders/create/page.tsx",
    "tags": ["frontend", "nextjs", "typescript", "form"],
    "interface": {
      "type": "page",
      "route": "/orders/create",
      "params": [],
      "dataSources": [
        {
          "kind": "api",
          "source": "/api/v1/orders",
          "method": "POST",
          "description": "Create new order",
          "auth": "JWT token",
          "inputs": ["orderData"],
          "outputs": ["createdOrder"],
          "refreshInterval": "none"
        }
      ]
    }
  },
  {
    "reason": "Database configuration and connection management",
    "description": "PostgreSQL database configuration, connection pooling, and migration setup. Includes environment-based configuration and health checks.",
    "dependencies": [],
    "priority": 6,
    "filename": "database_config_Python.prompt",
    "filepath": "src/database/config.py",
    "tags": ["backend", "database", "config"],
    "interface": {
      "type": "config",
      "keys": [
        {
          "name": "DATABASE_URL",
          "type": "string",
          "required": true,
          "source": "env"
        },
        {
          "name": "DATABASE_POOL_SIZE",
          "type": "integer",
          "default": 10,
          "source": "env"
        },
        {
          "name": "DATABASE_TIMEOUT",
          "type": "integer",
          "default": 30,
          "source": "env"
        }
      ]
    }
  }
]
