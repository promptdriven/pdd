[
  {
    "reason": "Initializes the Node.js project, defining its name, version, scripts (dev, build, start, lint), and dependencies. This is the foundational file for any JavaScript/TypeScript project.",
    "description": "Defines the project's core metadata and dependencies for Next.js, React, TypeScript, and Tailwind CSS. Assumes npm as the package manager.",
    "dependencies": [],
    "priority": 1,
    "filename": "package_json.prompt",
    "filepath": "package.json",
    "tags": ["config", "node"],
    "interface": {
      "type": "config",
      "config": {
        "keys": [
          {"name": "name", "type": "string", "default": "todo-app"},
          {"name": "version", "type": "string", "default": "0.1.0"},
          {"name": "private", "type": "boolean", "default": true},
          {"name": "scripts", "type": "object"},
          {"name": "dependencies", "type": "object"},
          {"name": "devDependencies", "type": "object"}
        ]
      }
    }
  },
  {
    "reason": "Configures the Next.js framework settings, such as experimental features or build options. This is a standard configuration file for a Next.js project.",
    "description": "Basic Next.js configuration file. No special settings are needed for this simple app, but the file is required for the project to run.",
    "dependencies": ["package_json.prompt"],
    "priority": 2,
    "filename": "next_config_js.prompt",
    "filepath": "next.config.mjs",
    "tags": ["config", "nextjs"],
    "interface": {
      "type": "config",
      "config": {
        "keys": []
      }
    }
  },
  {
    "reason": "Configures Tailwind CSS, including content paths to scan for utility classes, theme customizations, and plugins. This is necessary to enable the utility-first CSS framework.",
    "description": "Sets up Tailwind CSS to scan all relevant source files in `app/` and `src/` for class names to generate the final CSS stylesheet.",
    "dependencies": ["package_json.prompt"],
    "priority": 3,
    "filename": "tailwind_config_ts.prompt",
    "filepath": "tailwind.config.ts",
    "tags": ["config", "styling"],
    "interface": {
      "type": "config",
      "config": {
        "keys": [
          {"name": "content", "type": "array"},
          {"name": "theme", "type": "object"},
          {"name": "plugins", "type": "array"}
        ]
      }
    }
  },
  {
    "reason": "To establish a single source of truth for data structures used throughout the application, ensuring type safety between the API and the frontend.",
    "description": "Defines the core `Todo` type with properties like `id`, `text`, and `completed`. This file will be imported by both frontend components and backend API routes.",
    "dependencies": [],
    "priority": 4,
    "filename": "types_TypeScript.prompt",
    "filepath": "src/lib/types.ts",
    "tags": ["shared", "types"],
    "interface": {
      "type": "module"
    }
  },
  {
    "reason": "To abstract data persistence logic from the API handlers. This allows for easier testing and swapping of the underlying data store in the future.",
    "description": "A server-side module that simulates a database. It will manage an in-memory array of todos and provide CRUD (Create, Read, Update, Delete) functions. It should handle potential race conditions if this were a real application, but for now, simple array manipulations are sufficient.",
    "dependencies": ["types_TypeScript.prompt"],
    "priority": 5,
    "filename": "data_module_TypeScript.prompt",
    "filepath": "src/lib/data.ts",
    "tags": ["backend", "data-access"],
    "interface": {
      "type": "module",
      "module": {
        "functions": [
          {"name": "getTodos", "signature": "() => Promise<Todo[]>", "returns": "A list of all todo items."},
          {"name": "addTodo", "signature": "(text: string) => Promise<Todo>", "returns": "The newly created todo item."},
          {"name": "updateTodo", "signature": "(id: string, updates: Partial<Todo>) => Promise<Todo | null>", "returns": "The updated todo item or null if not found."},
          {"name": "deleteTodo", "signature": "(id: string) => Promise<void>", "returns": "Nothing."}
        ]
      }
    }
  },
  {
    "reason": "Provides the main API endpoints for fetching the list of all todos and for creating a new todo item.",
    "description": "Implements the Next.js API Route handlers for the `/api/todos` path. The GET handler will return all todos, and the POST handler will create a new todo using the data access module.",
    "dependencies": ["data_module_TypeScript.prompt", "types_TypeScript.prompt"],
    "priority": 6,
    "filename": "todos_api_TypeScriptNode.prompt",
    "filepath": "app/api/todos/route.ts",
    "tags": ["backend", "api"],
    "interface": {
      "type": "api",
      "api": {
        "endpoints": [
          {
            "method": "GET",
            "path": "/api/todos",
            "description": "Fetches all todo items.",
            "responseSchema": {"type": "array", "items": {"$ref": "Todo"}}
          },
          {
            "method": "POST",
            "path": "/api/todos",
            "description": "Creates a new todo item.",
            "requestSchema": {"type": "object", "properties": {"text": {"type": "string"}}},
            "responseSchema": {"$ref": "Todo"}
          }
        ]
      }
    }
  },
  {
    "reason": "Provides API endpoints for operations on a specific todo item, identified by its ID in the URL path.",
    "description": "Implements the Next.js API Route handlers for dynamic routes at `/api/todos/[id]`. The PATCH handler will update a todo's properties (e.g., marking it complete), and the DELETE handler will remove a todo.",
    "dependencies": ["data_module_TypeScript.prompt", "types_TypeScript.prompt"],
    "priority": 7,
    "filename": "todo_by_id_api_TypeScriptNode.prompt",
    "filepath": "app/api/todos/[id]/route.ts",
    "tags": ["backend", "api"],
    "interface": {
      "type": "api",
      "api": {
        "endpoints": [
          {
            "method": "PATCH",
            "path": "/api/todos/[id]",
            "description": "Updates a specific todo item.",
            "requestSchema": {"type": "object", "properties": {"text": {"type": "string", "optional": true}, "completed": {"type": "boolean", "optional": true}}},
            "responseSchema": {"$ref": "Todo"}
          },
          {
            "method": "DELETE",
            "path": "/api/todos/[id]",
            "description": "Deletes a specific todo item.",
            "responseSchema": {"type": "object", "properties": {"success": {"type": "boolean"}}}
          }
        ]
      }
    }
  },
  {
    "reason": "Defines the root HTML shell for the entire application, including global styles, fonts, and metadata. All pages will be rendered within this layout.",
    "description": "The root layout for the Next.js app. It will set up the `<html>` and `<body>` tags and include a basic background color and font styling for the application.",
    "dependencies": ["tailwind_config_ts.prompt"],
    "priority": 8,
    "filename": "layout_TypeScriptReact.prompt",
    "filepath": "app/layout.tsx",
    "tags": ["frontend", "nextjs", "layout"],
    "interface": {
      "type": "component",
      "component": {
        "props": [
          {"name": "children", "type": "React.ReactNode", "required": true}
        ]
      }
    }
  },
  {
    "reason": "To provide a user interface for creating new todo items. This component encapsulates the form state and submission logic.",
    "description": "A client-side component (`'use client'`) containing an input field and a submit button. It manages its own state for the input text and, on submission, makes a POST request to `/api/todos`. It should also handle optimistic updates or trigger a re-fetch of the todo list.",
    "dependencies": ["todos_api_TypeScriptNode.prompt"],
    "priority": 9,
    "filename": "add_todo_form_component_TypeScriptReact.prompt",
    "filepath": "src/components/AddTodoForm.tsx",
    "tags": ["frontend", "react", "component"],
    "interface": {
      "type": "component",
      "component": {
        "props": [],
        "emits": ["onTodoAdded"]
      }
    }
  },
  {
    "reason": "To display the list of todo items and allow users to interact with them (mark as complete, delete).",
    "description": "A client-side component (`'use client'`) that receives an array of todos as a prop. It maps over the array to render each todo item. Each item will have a checkbox to toggle its `completed` status (via PATCH request) and a button to delete it (via DELETE request).",
    "dependencies": ["types_TypeScript.prompt", "todo_by_id_api_TypeScriptNode.prompt"],
    "priority": 10,
    "filename": "todo_list_component_TypeScriptReact.prompt",
    "filepath": "src/components/TodoList.tsx",
    "tags": ["frontend", "react", "component"],
    "interface": {
      "type": "component",
      "component": {
        "props": [
          {"name": "initialTodos", "type": "Todo[]", "required": true}
        ]
      }
    }
  },
  {
    "reason": "Serves as the main entry point and view for the application, composing the primary UI components together.",
    "description": "The main page of the application, located at the root route '/'. This will be a React Server Component (RSC) that fetches the initial list of todos from the API during server-side rendering and passes them as a prop to the client-side `TodoList` component. It will also render the `AddTodoForm` component.",
    "dependencies": [
      "layout_TypeScriptReact.prompt",
      "add_todo_form_component_TypeScriptReact.prompt",
      "todo_list_component_TypeScriptReact.prompt",
      "todos_api_TypeScriptNode.prompt",
      "types_TypeScript.prompt"
    ],
    "priority": 11,
    "filename": "main_page_TypeScriptReact.prompt",
    "filepath": "app/page.tsx",
    "tags": ["frontend", "nextjs", "page"],
    "interface": {
      "type": "page",
      "page": {
        "route": "/",
        "dataSources": [
          {
            "kind": "api",
            "source": "/api/todos",
            "method": "GET",
            "description": "Fetches the initial list of todos on the server."
          }
        ]
      }
    }
  }
]